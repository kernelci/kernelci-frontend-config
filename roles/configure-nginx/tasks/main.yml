---
- name: Install default nginx configuration
  template: src=nginx-default.conf
            dest=/etc/nginx/nginx.conf
            owner=root
            group=root
            mode=0644
  notify:
    - reload-nginx
  tags:
    - web-server

- name: Disable default website
  file: state=absent
        dest=/etc/nginx/sites-enabled/default
  notify:
    - reload-nginx
  tags:
    - web-server

- name: Create www root directory
  file: state=directory
        dest={{ web_root }}/{{ hostname }}
        owner={{ web_user }}
        group={{ web_user }}
        mode=0755
  tags:
    - web-server

# There is not enough memory on staging to minify and merge the static assets.
# We just copy everything in the static/ directory. To use the minified versions
# we better run the node.js command locally and upload the file.
- name: Copy static assests (for staging)
  command: rsync -a -u {{ install_base }}/{{ hostname }}/app/dashboard/static/ {{ web_root }}/{{ hostname }}/static
  when: ansible_distribution == "Ubuntu"
  tags:
    - web-server
    - app

- name: Build static assets
  command: nodejs {{ install_base }}/{{ hostname }}/app/dashboard/static/js/lib/r.js -o {{ install_base }}/{{ hostname }}/app/dashboard/static/js/build.js
  when: ansible_distribution == "Debian"
  tags:
    - web-server
    - app

- name: Fix assets permissions
  file: path=/tmp/assets-build
        state=directory
        recurse=yes
        owner={{ app_user }}
        group={{ app_user }}
  when: ansible_distribution == "Debian"
  tags:
    - web-server
    - app

- name: Copy static assets
  command: rsync -a -u /tmp/assets-build/ {{ web_root }}/{{ hostname }}/static
  when: ansible_distribution == "Debian"
  tags:
    - web-server
    - app

- name: Copy maintenance page
  copy: src=maintenance.html
        dest={{ web_root }}/{{ hostname }}/maintenance.html.not
        owner={{ app_user }}
        group={{ app_user }}
        mode=0644
  tags:
      - web-server
      - app

- name: Install frontend nginx configuration
  template: src=kernelci-frontend.conf
            dest=/etc/nginx/sites-available/{{ hostname }}
            owner=root
            group=root
            mode=0644
  notify:
    - reload-nginx
  tags:
    - web-server

- name: Enable frontend website
  file: state=link
        src=/etc/nginx/sites-available/{{ hostname }}
        dest=/etc/nginx/sites-enabled/{{ hostname }}
        owner=root
        group=root
  tags:
    - web-server

- name: Install local nginx configuration
  copy: src=nginx-local.conf
        dest=/etc/nginx/conf.d/nginx-local.conf
        owner=root
        group=root
        mode=0644
  notify:
    - reload-nginx
  tags:
    - web-server

- name: Install nginx upstream definitions
  template: src=frontend-upstreams.conf
            dest=/etc/nginx/conf.d/frontend-upstreams.conf
            mode=0644
            owner=root
            group=root
  notify:
    - reload-nginx
  tags:
    - web-server

- name: Install uwsgi configuration file
  template: src=kernelci-frontend.ini
            dest=/etc/uwsgi/apps-available/kernelci-frontend.ini
            owner=root
            group=root
            mode=0644
  notify:
    - reload-uwsgi
  tags:
    - web-server

- name: Enable uwsgi frontend application
  file: state=link
        src=/etc/uwsgi/apps-available/kernelci-frontend.ini
        dest=/etc/uwsgi/apps-enabled/kernelci-frontend.ini
        owner=root
        group=root
  notify:
    - reload-uwsgi
  tags:
    - web-server

- name: Clone letsencrypt repo
  when: role == "production"
  git:  repo=https://github.com/letsencrypt/letsencrypt.git
        dest={{ install_base }}/letsencrypt
        update=yes
        force=yes
  tags:
    - web-server
    - https

- name: Make sure letsencrypt config directory exists
  when: role == "production"
  file: path=/etc/letsencrypt
        state=directory
        owner=root
        group=root
        mode=0755
  tags:
    - web-server
    - https

- name: Copy letsencrypt config file
  when: role == "production"
  template: src=cli.ini
            dest=/etc/letsencrypt/cli.ini
            owner=root
            group=root
            mode=0644
  tags:
    - web-server
    - https

- name: Set up cronjob for HTTPS certificates renewal
  when: role == "production"
  cron: name="Renew TLS certificates"
        user=root
        state=present
        job="{{ install_base }}/letsencrypt/letsencrypt-auto renew -c /etc/letsencrypt/cli.ini 1>/dev/null && systemctl reload nginx.service"
        cron_file=letsencrypt-tls-certs
        day=7,14,21,28
        hour=3
        minute=10
  tags:
    - web-server
    - cron
    - https

# This is a very loooong task.
# Better doing it directly on the server first.
# For the why: OpenSSL default Diffie-Helman Ephemeral key is only 1024 bits,
# but we use a 4096 bits certificate. That means that who uses DHE algo will
# get weaker keys than non-DH algo.
- name: Create Diffie-Helman key-exchange cert
  when: role == "production"
  shell: openssl dhparam -out /etc/ssl/certs/dhparam.pem 4096
         creates=/etc/ssl/certs/dhparam.pem
  tags:
      - web-server
      - https
  notify:
      - reload-nginx

- name: Check perms on key-exchange cert
  when: role == "production"
  file: path=/etc/ssl/certs/dhparam.pem
        owner=root
        group=root
        mode=0644
  tags:
      - https
      - web-server
