server {
    server_name www.{{ hostname }};
{% if role == "production" %}
    return 301 https://{{ hostname }}$request_uri;
{% else %}
    return 301 $scheme://{{ hostname }}$request_uri;
{% endif %}
}

{% if role == "production" %}
server {
    listen * default_server;
    listen [::] default_server;
    server_name {{ hostname }};
    return 301 https://{{ hostname }}$request_uri;
}

server {
    listen *:443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;

    ssl_certificate /etc/letsencrypt/live/{{ certname }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ certname }}/privkey.pem;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH:HIGH:!ADH:!AECDH:!aNULL:!MD5:!eNULL";
    ssl_dhparam /etc/ssl/certs/dhparam.pem;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_session_timeout 10m;
    ssl_session_cache shared:SSL:50m;
{% if "ssl_stapling_resolver" is defined %}
    ssl_stapling on;
    resolver {{ ssl_stapling_resolver }} ipv6=on;
    resolver_timeout 3s;
{% endif %}
    add_header Strict-Transport-Security "max-age=31536000; preload";
{% else %}

server {
    listen * default_server;
    listen [::] default_server;
{% endif %}

    server_name {{ hostname }};
    root {{ web_root }}/{{ hostname }};
    charset utf-8;

    access_log /var/log/nginx/{{ hostname }}-access.log combined buffer=16k;
    error_log /var/log/nginx/{{ hostname }}-error.log crit;

    if ($host != "{{ hostname }}") {
        return 403;
    }

    location = /favicon.ico {
        access_log off;
        error_log /dev/null;
        expires 180d;
        add_header Pragma "public";
        add_header Cache-Control "public";
        alias {{ web_root }}/{{ hostname }}/static/img/favicon.ico;
    }

    location = /robots.txt {
        access_log off;
        error_log /dev/null;
        add_header Pragma "public";
        add_header Cache-Control "public";
        alias {{ web_root }}/{{ hostname }}/robots.txt;
    }

    # This is for letsencrypt auto-renew to work.
    location /.well-known/ {
        root {{ web_root }}/{{ hostname }}/;
    }

    location /static/ {
        root {{ web_root }}/{{ hostname }}/;
    }

    location / {
        if (-f $document_root/maintenance.html) {
            return 503;
        }

        include uwsgi_params;
        uwsgi_modifier1 30;
        uwsgi_pass frontends;

        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_redirect off;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;
    }

    error_page 503 @maintenance;
    location @maintenance {
        access_log off;
        error_log /dev/null;
        rewrite ^(.*)$ /maintenance.html break;
    }

    location ~* \.(?:ico|gif|jpe?g|png|ttf|svg|woff|woff2|eot)$ {
        access_log off;
        error_log /dev/null;
        expires 180d;
        add_header Pragma "public";
        add_header Cache-Control "public";
    }

    location ~* \.(?:css|js|map)$ {
        access_log off;
        error_log /dev/null;
        expires max;
        location ~ (common\.js|kci-.*\.js) {
            expires 20m;
        }
        add_header Pragma "public";
        add_header Cache-Control "public";
    }
}
